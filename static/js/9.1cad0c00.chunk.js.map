{"version":3,"sources":["components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/Section/index.js","components/DecoderText/index.js","components/Divider/index.js"],"names":["TextArea","className","resize","value","onChange","minRows","maxRows","rest","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","useRef","useEffect","style","getComputedStyle","current","lineHeight","parseInt","paddingHeight","paddingTop","paddingBottom","classNames","ref","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","aria-labelledby","aria-describedby","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","numToMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","data","FormData","fetch","action","method","body","headers","then","response","console","log","catch","Section","Helmet","name","content","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","prerender","level","as","durationXS","DecoderText","text","start","delay","Divider","required","autoComplete","type","maxLength","errorStatus","Button","disabled","loading","loadingText","aria-live","Text","size","secondary","iconHoverShift","href","children","align","weight","clampedLevel","Math","min","max","Component","rel","GothamBold","crossorigin","forwardRef","glyphs","CharType","startDelay","output","container","reduceMotion","usePrefersReducedMotion","containerInstance","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","chain","spring","from","to","stiffness","damping","stop","aria-hidden","memo","lineWidth","notchWidth","notchHeight","collapseDelay","collapsed","defaultProps"],"mappings":"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","file":"static/js/9.1cad0c00.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport './TextArea.css';\r\n\r\nconst TextArea = ({\r\n  className,\r\n  resize = 'none',\r\n  value,\r\n  onChange,\r\n  minRows = 1,\r\n  maxRows,\r\n  ...rest\r\n}) => {\r\n  const [rows, setRows] = useState(minRows);\r\n  const [textareaDimensions, setTextareaDimensions] = useState();\r\n  const textareaRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const style = getComputedStyle(textareaRef.current);\r\n    const lineHeight = parseInt(style.lineHeight, 10);\r\n    const paddingHeight =\r\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\r\n    setTextareaDimensions({ lineHeight, paddingHeight });\r\n  }, []);\r\n\r\n  const handleChange = event => {\r\n    onChange(event);\r\n\r\n    const { lineHeight, paddingHeight } = textareaDimensions;\r\n    const previousRows = event.target.rows;\r\n    event.target.rows = minRows;\r\n\r\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\r\n\r\n    if (currentRows === previousRows) {\r\n      event.target.rows = currentRows;\r\n    }\r\n\r\n    if (maxRows && currentRows >= maxRows) {\r\n      event.target.rows = maxRows;\r\n      event.target.scrollTop = event.target.scrollHeight;\r\n    }\r\n\r\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\r\n  };\r\n\r\n  return (\r\n    <textarea\r\n      className={classNames('textarea', className)}\r\n      ref={textareaRef}\r\n      onChange={handleChange}\r\n      style={{ '--resize': resize }}\r\n      rows={rows}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n","import { useState, useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { TransitionGroup, Transition } from 'react-transition-group';\r\nimport TextArea from './TextArea';\r\nimport { useId } from 'hooks';\r\nimport { isVisible } from 'utils/transition';\r\nimport { tokens } from 'components/ThemeProvider/theme';\r\nimport { msToNum, numToPx } from 'utils/style';\r\nimport Icon from 'components/Icon';\r\nimport './index.css';\r\n\r\nconst Input = ({\r\n  id,\r\n  label,\r\n  hasValue,\r\n  value,\r\n  multiline,\r\n  className,\r\n  style,\r\n  error,\r\n  onBlur,\r\n  ...rest\r\n}) => {\r\n  const [focused, setFocused] = useState(false);\r\n  const generatedId = useId();\r\n  const errorRef = useRef();\r\n  const inputId = id || `input-${generatedId}`;\r\n  const labelId = `${inputId}-label`;\r\n  const errorId = `${inputId}-error`;\r\n  const InputElement = multiline ? TextArea : 'input';\r\n\r\n  const handleBlur = event => {\r\n    setFocused(false);\r\n\r\n    if (onBlur) {\r\n      onBlur(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames('input', className, { 'input--error': !!error })}\r\n      style={style}\r\n    >\r\n      <div className=\"input__content\">\r\n        <label\r\n          className={classNames('input__label', {\r\n            'input__label--focused': focused,\r\n            'input__label--has-value': !!value,\r\n          })}\r\n          id={labelId}\r\n          htmlFor={inputId}\r\n        >\r\n          {label}\r\n        </label>\r\n        <InputElement\r\n          className=\"input__element\"\r\n          id={inputId}\r\n          aria-labelledby={labelId}\r\n          aria-describedby={!!error ? errorId : undefined}\r\n          onFocus={() => setFocused(true)}\r\n          onBlur={handleBlur}\r\n          value={value}\r\n          {...rest}\r\n        />\r\n        <div\r\n          className={classNames('input__underline', {\r\n            'input__underline--focused': focused,\r\n          })}\r\n        />\r\n      </div>\r\n      <TransitionGroup component={null}>\r\n        {!!error && (\r\n          <Transition timeout={msToNum(tokens.base.durationM)}>\r\n            {status => (\r\n              <div\r\n                className={classNames('input__error', `input__error--${status}`)}\r\n                id={errorId}\r\n                role=\"alert\"\r\n                style={{\r\n                  '--height': isVisible(status)\r\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\r\n                    : '0px',\r\n                }}\r\n              >\r\n                <div className=\"input__error-message\" ref={errorRef}>\r\n                  <Icon icon=\"error\" />\r\n                  {error}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Transition>\r\n        )}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import './index.css';\r\n\r\nimport classNames from 'classnames';\r\nimport { Button } from 'components/Button';\r\nimport DecoderText from 'components/DecoderText';\r\nimport Divider from 'components/Divider';\r\nimport Heading from 'components/Heading';\r\nimport Icon from 'components/Icon';\r\nimport Input from 'components/Input';\r\nimport Section from 'components/Section';\r\nimport Text from 'components/Text';\r\nimport { tokens } from 'components/ThemeProvider/theme';\r\nimport { useFormInput, useRouteTransition, useScrollRestore } from 'hooks';\r\nimport { useCallback, useRef, useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Transition, TransitionGroup } from 'react-transition-group';\r\nimport prerender from 'utils/prerender';\r\nimport { msToNum, numToMs, numToPx } from 'utils/style';\r\nimport { isVisible, reflow } from 'utils/transition';\r\n\r\nconst initDelay = tokens.base.durationS;\r\n\r\nfunction getStatusError({\r\n  status,\r\n  errorMessage,\r\n  fallback = 'There was a problem with your request',\r\n}) {\r\n  if (status === 200) return false;\r\n\r\n  const statuses = {\r\n    500: 'There was a problem with the server, try again later',\r\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\r\n  };\r\n\r\n  if (errorMessage) {\r\n    return errorMessage;\r\n  }\r\n\r\n  return statuses[status] || fallback;\r\n}\r\n\r\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\r\n  const numDelay = msToNum(delayMs) * multiplier;\r\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\r\n}\r\n\r\nconst Contact = () => {\r\n  const { status } = useRouteTransition();\r\n  const errorRef = useRef();\r\n  const email = useFormInput('');\r\n  const message = useFormInput('');\r\n  const [sending, setSending] = useState(false);\r\n  const [complete, setComplete] = useState(false);\r\n  const [statusError, setStatusError] = useState('');\r\n  useScrollRestore();\r\n\r\n  const onSubmit = useCallback(\r\n\r\n    async function handleSubmit(event) {\r\n\r\n      event.preventDefault();\r\n      var data = new FormData(event.target);\r\n\r\n      fetch( event.target.action, {\r\n          method: \"post\",\r\n          body: data,\r\n          headers: {\r\n              'Accept': 'application/json'\r\n          }\r\n      })\r\n      .then( response => {\r\n        console.log(\"Gracias por su mensaje, será contestado a la brevedad!\");\r\n        console.log(data);\r\n          // setTimeout(function () {\r\n          //   statusError.textContent = \"\";\r\n          // }, 5000);\r\n      })\r\n      .catch( error => {\r\n       console.log( \"Oops! Hubo un problema al enviar su mensaje.\" + error);\r\n      });\r\n     }\r\n  //   async event => {\r\n  //     event.preventDefault();\r\n  //     setStatusError('');\r\n\r\n  //     if (sending) return;\r\n\r\n  //     try {\r\n  //       setSending(true);\r\n  //       var data = new FormData(event.target);\r\n  //       const response = await fetch(event.target.action, {\r\n  //         method: form.method,\r\n  //         body: data,\r\n  //         headers: {\r\n  //             'Accept': 'application/json'\r\n  //         }\r\n  //       }).then( response => {\r\n  //         status.innerHTML = \"Gracias por su mensaje, será contestado a la brevedad!\";\r\n  //         form.reset();\r\n  //         setTimeout(function () {\r\n  //             status.innerHTML = \"\";\r\n  //         }, 5000);\r\n  //       }).catch( error => {\r\n  //         status.innerHTML = `Oops! Hubo un problema al enviar su mensaje.${error}`;\r\n  //       });\r\n\r\n  //       const responseMessage = await response.json();\r\n\r\n  //       const statusError = getStatusError({\r\n  //         status: response?.status,\r\n  //         errorMessage: responseMessage?.error,\r\n  //         fallback: 'There was a problem sending your message',\r\n  //       });\r\n\r\n  //       if (statusError) throw new Error(statusError);\r\n\r\n  //       setComplete(true);\r\n  //       setSending(false);\r\n  //     } catch (error) {\r\n  //       setSending(false);\r\n  //       setStatusError(error.message);\r\n  //     }\r\n  //   },\r\n  //   [email.value, message.value, sending]\r\n);\r\n\r\n  return (\r\n    <Section className={classNames('contact', `contact--${status}`)}>\r\n      <Helmet>\r\n        <title>Contact | Hamish Williams</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\r\n        />\r\n      </Helmet>\r\n      <TransitionGroup component={null}>\r\n        {!complete && (\r\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\r\n            {status => (\r\n              <form className=\"contact__form\" method=\"post\" id=\"myForm\" action=\"https://formspree.io/f/xqknzpay\" onSubmit={onSubmit}>\r\n                <Heading\r\n                  className={classNames('contact__title', `contact__title--${status}`, {\r\n                    'contact__title--hidden': prerender,\r\n                  })}\r\n                  level={3}\r\n                  as=\"h1\"\r\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\r\n                >\r\n                  <DecoderText\r\n                    text=\"Di hola\"\r\n                    start={status !== 'exited' && !prerender}\r\n                    delay={300}\r\n                  />\r\n                </Heading>\r\n                <Divider\r\n                  className={classNames(\r\n                    'contact__divider',\r\n                    `contact__divider--${status}`,\r\n                    { 'contact__divider--hidden': prerender }\r\n                  )}\r\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\r\n                />\r\n                <Input\r\n                  required\r\n                  className={classNames('contact__input', `contact__input--${status}`, {\r\n                    'contact__input--hidden': prerender,\r\n                  })}\r\n                  style={getDelay(tokens.base.durationXS, initDelay)}\r\n                  autoComplete=\"email\"\r\n                  label=\"Ingrese su email\"\r\n                  type=\"email\"\r\n                  maxLength={512}\r\n                  {...email}\r\n                />\r\n                <Input\r\n                  required\r\n                  multiline\r\n                  className={classNames('contact__input', `contact__input--${status}`, {\r\n                    'contact__input--hidden': prerender,\r\n                  })}\r\n                  style={getDelay(tokens.base.durationS, initDelay)}\r\n                  autoComplete=\"off\"\r\n                  label=\"Escriba su mensaje aquí\"\r\n                  maxLength={4096}\r\n                  {...message}\r\n                />\r\n                <TransitionGroup component={null}>\r\n                  {!!statusError && (\r\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\r\n                      {errorStatus => (\r\n                        <div\r\n                          className={classNames(\r\n                            'contact__form-error',\r\n                            `contact__form-error--${errorStatus}`\r\n                          )}\r\n                          style={{\r\n                            '--height': isVisible(errorStatus)\r\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\r\n                              : '0px',\r\n                          }}\r\n                        >\r\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\r\n                            <div className=\"contact__form-error-message\">\r\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\r\n                              {statusError}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Transition>\r\n                  )}\r\n                </TransitionGroup>\r\n                <Button\r\n                  className={classNames('contact__button', `contact__button--${status}`, {\r\n                    'contact__button--hidden': prerender,\r\n                    'contact__button--sending': sending,\r\n                  })}\r\n                  style={getDelay(tokens.base.durationM, initDelay)}\r\n                  disabled={sending}\r\n                  loading={sending}\r\n                  loadingText=\"Enviando...\"\r\n                  icon=\"send\"\r\n                  type=\"submit\"\r\n                >\r\n                  Enviar mensaje\r\n                </Button>\r\n              </form>\r\n            )}\r\n          </Transition>\r\n        )}\r\n        {complete && (\r\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\r\n            {status => (\r\n              <div className=\"contact__complete\" aria-live=\"polite\">\r\n                <Heading\r\n                  level={3}\r\n                  as=\"h3\"\r\n                  className={classNames(\r\n                    'contact__complete-title',\r\n                    `contact__complete-title--${status}`\r\n                  )}\r\n                >\r\n                  Message Sent\r\n                </Heading>\r\n                <Text\r\n                  size=\"l\"\r\n                  className={classNames(\r\n                    'contact__complete-text',\r\n                    `contact__complete-text--${status}`\r\n                  )}\r\n                  style={getDelay(tokens.base.durationXS)}\r\n                >\r\n                  I’ll get back to you within a couple days, sit tight\r\n                </Text>\r\n                <Button\r\n                  secondary\r\n                  iconHoverShift\r\n                  className={classNames(\r\n                    'contact__complete-button',\r\n                    `contact__complete-button--${status}`\r\n                  )}\r\n                  style={getDelay(tokens.base.durationM)}\r\n                  href=\"/\"\r\n                  icon=\"chevronRight\"\r\n                >\r\n                  Back to homepage\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </Transition>\r\n        )}\r\n      </TransitionGroup>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\r\nimport classNames from 'classnames';\r\nimport { Helmet } from 'react-helmet';\r\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\r\nimport './index.css';\r\n\r\nconst Heading = ({\r\n  children,\r\n  level = 1,\r\n  as,\r\n  align = 'auto',\r\n  weight = 'medium',\r\n  className,\r\n  ...rest\r\n}) => {\r\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\r\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Conditionally load the bold font weight because we use it less frequently */}\r\n      {weight === 'bold' && (\r\n        <Helmet>\r\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\r\n          <style>\r\n            {`\r\n              @font-face {\r\n                font-family: 'Gotham';\r\n                font-weight: 700;\r\n                src: url(${GothamBold}) format('woff2');\r\n                font-display: swap;\r\n              }\r\n            `}\r\n          </style>\r\n        </Helmet>\r\n      )}\r\n      <Component\r\n        className={classNames(\r\n          className,\r\n          'heading',\r\n          `heading--align-${align}`,\r\n          `heading--level-${clampedLevel}`,\r\n          `heading--weight-${weight}`\r\n        )}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Component>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Heading;\r\n","import classNames from 'classnames';\r\nimport './index.css';\r\n\r\nconst Text = ({\r\n  children,\r\n  size = 'm',\r\n  as: Component = 'p',\r\n  align = 'auto',\r\n  weight = 'auto',\r\n  secondary,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Component\r\n      className={classNames(\r\n        className,\r\n        'text',\r\n        `text--align-${align}`,\r\n        `text--size-${size}`,\r\n        `text--weight-${weight}`,\r\n        {\r\n          'text--secondary': secondary,\r\n        }\r\n      )}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n\r\nexport default Text;\r\n","import { forwardRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport './index.css';\r\n\r\nconst Section = forwardRef(\r\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\r\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n);\r\n\r\nexport default Section;\r\n","import { useRef, useEffect, memo } from 'react';\r\nimport classNames from 'classnames';\r\nimport { usePrefersReducedMotion } from 'hooks';\r\nimport { spring, chain, delay, value } from 'popmotion';\r\nimport VisuallyHidden from 'components/VisuallyHidden';\r\nimport prerender from 'utils/prerender';\r\nimport './index.css';\r\n\r\n// prettier-ignore\r\nconst glyphs = [\r\n  'ア', 'イ', 'ウ', 'エ', 'オ',\r\n  'カ', 'キ', 'ク', 'ケ', 'コ',\r\n  'サ', 'シ', 'ス', 'セ', 'ソ',\r\n  'タ', 'チ', 'ツ', 'テ', 'ト',\r\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\r\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\r\n  'マ', 'ミ', 'ム', 'メ', 'モ',\r\n  'ヤ', 'ユ', 'ヨ', 'ー',\r\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\r\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\r\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\r\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\r\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\r\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\r\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\r\n];\r\n\r\nconst CharType = {\r\n  Glyph: 'glyph',\r\n  Value: 'value',\r\n};\r\n\r\nfunction shuffle(content, output, position) {\r\n  return content.map((value, index) => {\r\n    if (index < position) {\r\n      return { type: CharType.Value, value };\r\n    }\r\n\r\n    if (position % 1 < 0.5) {\r\n      const rand = Math.floor(Math.random() * glyphs.length);\r\n      return { type: CharType.Glyph, value: glyphs[rand] };\r\n    }\r\n\r\n    return { type: CharType.Glyph, value: output[index].value };\r\n  });\r\n}\r\n\r\nconst DecoderText = ({\r\n  text,\r\n  start = true,\r\n  delay: startDelay = 0,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\r\n  const container = useRef();\r\n  const reduceMotion = usePrefersReducedMotion();\r\n\r\n  useEffect(() => {\r\n    const containerInstance = container.current;\r\n    const content = text.split('');\r\n    let animation;\r\n\r\n    const renderOutput = () => {\r\n      const characterMap = output.current.map(item => {\r\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\r\n      });\r\n\r\n      containerInstance.innerHTML = characterMap.join('');\r\n    };\r\n\r\n    const springValue = value(0, position => {\r\n      output.current = shuffle(content, output.current, position);\r\n      renderOutput();\r\n    });\r\n\r\n    if (start && !animation && !reduceMotion && !prerender) {\r\n      animation = chain(\r\n        delay(startDelay),\r\n        spring({\r\n          from: 0,\r\n          to: content.length,\r\n          stiffness: 8,\r\n          damping: 5,\r\n        })\r\n      ).start(springValue);\r\n    }\r\n\r\n    if (reduceMotion) {\r\n      output.current = content.map((value, index) => ({\r\n        type: CharType.Value,\r\n        value: content[index],\r\n      }));\r\n      renderOutput();\r\n    }\r\n\r\n    return () => {\r\n      if (animation) {\r\n        animation.stop();\r\n      }\r\n    };\r\n  }, [reduceMotion, start, startDelay, text]);\r\n\r\n  return (\r\n    <span className={classNames('decoder-text', className)} {...rest}>\r\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\r\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default memo(DecoderText);\r\n","import classNames from 'classnames';\r\nimport { numToMs } from 'utils/style';\r\nimport './index.css';\r\n\r\nconst Divider = ({\r\n  lineWidth,\r\n  lineHeight,\r\n  notchWidth,\r\n  notchHeight,\r\n  collapseDelay,\r\n  collapsed,\r\n  className,\r\n  style,\r\n}) => (\r\n  <div\r\n    className={classNames('divider', className)}\r\n    style={{\r\n      '--lineWidth': lineWidth,\r\n      '--lineHeight': lineHeight,\r\n      '--notchWidth': notchWidth,\r\n      '--notchHeight': notchHeight,\r\n      '--collapseDelay': numToMs(collapseDelay),\r\n      ...style,\r\n    }}\r\n  >\r\n    <div\r\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\r\n    />\r\n    <div\r\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\r\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\r\n    />\r\n  </div>\r\n);\r\n\r\nDivider.defaultProps = {\r\n  lineWidth: '100%',\r\n  lineHeight: '2px',\r\n  notchWidth: '90px',\r\n  notchHeight: '10px',\r\n  collapsed: false,\r\n  collapseDelay: 0,\r\n};\r\n\r\nexport default Divider;\r\n"],"sourceRoot":""}